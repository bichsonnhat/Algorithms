#include <iostream>
#include <algorithm>
using namespace std;
const int N = 1e6 + 2;
int p[N],t[N],d[N];
int n;
long long cost(int x){
    long long res = 0;
    for (int i = 1; i <= n; i++)
        res = res + max(0LL,abs(1LL * p[i] - x) - 1LL * d[i]) * t[i];
    return res;
}
int main()
{
    ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin >> n;
    for (int i = 1; i <= n; i++) cin >> p[i] >> t[i] >> d[i];
    int L = 0 , R = *max_element(p + 1 , p + 1 + n);
    while (R - L > 3){
        int mid_1 = L + (R - L)/3;
        int mid_2 = R - (R - L)/3;
        if (cost(mid_1) > cost(mid_2)) L = mid_1;
        else R = mid_2;
    }
    long long ans = 1e18;
    for (int u = L; u <= R; u++) ans = min(ans,cost(u));
    cout << ans;
    return 0;
}