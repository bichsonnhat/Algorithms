#include <bits/stdc++.h>
using namespace std;


#define TASK "TASK"
#define X first
#define Y second
#define ll long long

const int N = 1e5 + 5;
int n, q;
ll a[N];

struct lazy_segment_tree {
    ll seg[4 * N], lazy[4 * N];
    void down(ll id, ll l, ll r){
        ll mid = (l + r) >> 1;
        lazy[id * 2] += lazy[id];
        lazy[id * 2 + 1] += lazy[id];
        seg[id * 2] += lazy[id];
        seg[id * 2 + 1] += lazy[id];
        lazy[id] = 0;
    }

    void build(ll id, ll l, ll r){
        if (l == r){
            seg[id] = a[l];
            return;
        }
        ll mid = (l + r) >> 1;
        build(id * 2, l, mid);
        build(id * 2 + 1, mid + 1, r);
        seg[id] = max(seg[id * 2], seg[id * 2 + 1]);
    }

    void update(ll id, ll l, ll r, ll u, ll v, ll val){
        if (v < l || r < u) return;
        if (u <= l && r <= v){
            seg[id] += val;
            lazy[id] += val;
            return;
        }
        down(id, l, r);
        ll mid = (l + r) >> 1;
        update(id * 2, l, mid, u, v, val);
        update(id * 2 + 1, mid + 1, r, u, v, val);
        seg[id] = max(seg[id * 2], seg[id * 2 + 1]);
    }

    ll get(ll id, ll l, ll r, ll u, ll v){
       if (v < l || r < u) return 0;
       if (u <= l && r <= v) return seg[id];
       down(id, l, r);
       ll mid = (l + r) >> 1;
       return max(get(id * 2, l, mid, u, v), get(id * 2 + 1, mid + 1, r, u, v));
    }
} IT;
void Solve(){
    cin >> n >> q;
    for (int i = 1; i <= n; ++i) cin >> a[i];
    IT.build(1, 1, n);
    while (q--){
        ll type;
        cin >> type;
        if (type == 1){
            ll l, r, x;
            cin >> l >> r >> x;
            IT.update(1, 1, n, l, r, x);
        } else {
            ll l, r;
            cin >> l >> r;
            cout << IT.get(1, 1, n, l, r) << '\n';
        }
    }
    return;
}
int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    #ifndef ONLINE_JUDGE
        freopen(TASK".INP","r",stdin);
        freopen(TASK".OUT","w",stdout);
    #endif
    int ntests = 1;
//    cin >> ntests;
    while (ntests--) Solve();
    return 0;
}
